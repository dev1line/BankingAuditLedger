version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.10-alpine
    container_name: banking-audit-postgres
    environment:
      POSTGRES_DB: banking_audit_db
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: audit_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-go/migrations:/docker-entrypoint-initdb.d
    networks:
      - banking-audit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d banking_audit_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: ./backend-go
      dockerfile: Dockerfile
    container_name: banking-audit-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: audit_user
      DB_PASSWORD: audit_password
      DB_NAME: banking_audit_db
      DB_SSLMODE: disable
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      FABRIC_NETWORK_CONFIG_PATH: /opt/fabric-config
      FABRIC_CHANNEL_NAME: mychannel
      FABRIC_CHAINCODE_NAME: loghash
      FABRIC_USER_NAME: Admin
      FABRIC_ORG_NAME: Org1MSP
      FABRIC_ORG_DOMAIN: org1.example.com
      FABRIC_PEER_NAME: peer0.org1.example.com
      LOG_LEVEL: info
      LOG_FORMAT: json
      METRICS_ENABLED: true
      METRICS_PORT: 9090
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ./blockchain-fabric/network-base:/opt/fabric-config:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - banking-audit-network
      - fabric_test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: banking-audit-frontend
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080/api/v1
      REACT_APP_APP_NAME: Banking Audit Ledger
      REACT_APP_VERSION: 1.0.0
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - banking-audit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hyperledger Fabric Orderer
  orderer:
    image: hyperledger/fabric-orderer:2.4.9
    container_name: banking-audit-orderer
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: orderer
    volumes:
      - ./blockchain-fabric/network/genesis.block:/var/hyperledger/orderer/orderer.genesis.block:ro
      - ./blockchain-fabric/network/crypto-config/ordererOrganizations/bankingaudit.com/orderers/orderer.bankingaudit.com/msp:/var/hyperledger/orderer/msp:ro
      - ./blockchain-fabric/network/crypto-config/ordererOrganizations/bankingaudit.com/orderers/orderer.bankingaudit.com/tls/:/var/hyperledger/orderer/tls:ro
      - orderer_data:/var/hyperledger/production/orderer
    ports:
      - "7050:7050"
    networks:
      - banking-audit-network

  # Hyperledger Fabric Peer
  peer:
    image: hyperledger/fabric-peer:2.4.9
    container_name: banking-audit-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=banking-audit-network_network
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=peer0.bankingaudit.com
      - CORE_PEER_ADDRESS=peer0.bankingaudit.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.bankingaudit.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.bankingaudit.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.bankingaudit.com:7051
      - CORE_PEER_LOCALMSPID=BankingAuditMSP
    volumes:
      - /var/run/:/host/var/run/
      - ./blockchain-fabric/network/crypto-config/peerOrganizations/bankingaudit.com/peers/peer0.bankingaudit.com/msp:/etc/hyperledger/fabric/msp:ro
      - ./blockchain-fabric/network/crypto-config/peerOrganizations/bankingaudit.com/peers/peer0.bankingaudit.com/tls:/etc/hyperledger/fabric/tls:ro
      - peer_data:/var/hyperledger/production
      - ./blockchain-fabric/chaincode:/opt/gopath/src/github.com/hyperledger/fabric/peer/chaincode:ro
      - ./blockchain-fabric/network/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts:ro
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - "7051:7051"
      - "7052:7052"
    depends_on:
      - orderer
    networks:
      - banking-audit-network

networks:
  banking-audit-network:
    driver: bridge
  fabric_test:
    external: true

volumes:
  postgres_data:
  orderer_data:
  peer_data:
